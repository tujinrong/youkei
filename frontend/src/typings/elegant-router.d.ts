/* eslint-disable */
/* prettier-ignore */
// Generated by elegant-router
// Read more: https://github.com/soybeanjs/elegant-router

declare module "@elegant-router/types" {
  type ElegantConstRoute = import('@elegant-router/vue').ElegantConstRoute;

  /**
   * route layout
   */
  export type RouteLayout = "base" | "blank";

  /**
   * route map
   */
  export type RouteMap = {
    "root": "/";
    "not-found": "/:pathMatch(.*)*";
    "403": "/403";
    "404": "/404";
    "500": "/500";
    "gj10": "/gj10";
    "gj10_gj1010": "/gj10/gj1010";
    "gj10_gj1020": "/gj10/gj1020";
    "gj10_gj1030": "/gj10/gj1030";
    "gj10_gj1040": "/gj10/gj1040";
    "gj10_gj1050": "/gj10/gj1050";
    "gj10_gj1060": "/gj10/gj1060";
    "gj10_gj1070": "/gj10/gj1070";
    "gj20": "/gj20";
    "gj20_gj2010": "/gj20/gj2010";
    "gj20_gj2020": "/gj20/gj2020";
    "gj20_gj2030": "/gj20/gj2030";
    "gj20_gj2040": "/gj20/gj2040";
    "gj20_gj2050": "/gj20/gj2050";
    "gj20_gj2060": "/gj20/gj2060";
    "gj20_gj2070": "/gj20/gj2070";
    "gj20_gj2080": "/gj20/gj2080";
    "gj20_gj2090": "/gj20/gj2090";
    "gj20_gj2100": "/gj20/gj2100";
    "gj20_gj2110": "/gj20/gj2110";
    "gj20_gj2120": "/gj20/gj2120";
    "gj30": "/gj30";
    "gj30_gj3010": "/gj30/gj3010";
    "gj30_gj3020": "/gj30/gj3020";
    "gj30_gj3030": "/gj30/gj3030";
    "gj40": "/gj40";
    "gj40_gj4010": "/gj40/gj4010";
    "gj40_gj4020": "/gj40/gj4020";
    "gj40_gj4030": "/gj40/gj4030";
    "gj40_gj4040": "/gj40/gj4040";
    "gj40_gj4050": "/gj40/gj4050";
    "gj40_gj4060": "/gj40/gj4060";
    "gj40_gj4070": "/gj40/gj4070";
    "gj50": "/gj50";
    "gj50_gj5010": "/gj50/gj5010";
    "gj60": "/gj60";
    "gj60_gj6010": "/gj60/gj6010";
    "gj60_gj6020": "/gj60/gj6020";
    "gj60_gj6021": "/gj60/gj6021";
    "gj60_gj6030": "/gj60/gj6030";
    "gj60_gj6040": "/gj60/gj6040";
    "gj70": "/gj70";
    "gj70_gj7010": "/gj70/gj7010";
    "gj70_gj7020": "/gj70/gj7020";
    "gj70_gj7030": "/gj70/gj7030";
    "gj80": "/gj80";
    "gj80_gj8010": "/gj80/gj8010";
    "gj80_gj8020": "/gj80/gj8020";
    "gj80_gj8030": "/gj80/gj8030";
    "gj80_gj8040": "/gj80/gj8040";
    "gj80_gj8050": "/gj80/gj8050";
    "gj80_gj8060": "/gj80/gj8060";
    "gj80_gj8070": "/gj80/gj8070";
    "gj80_gj8080": "/gj80/gj8080";
    "gj80_gj8090": "/gj80/gj8090";
    "gj80_gj8100": "/gj80/gj8100";
    "home": "/home";
    "iframe-page": "/iframe-page/:url";
    "login": "/login/:module(pwd-login)?";
    "preview": "/preview";
    "todo": "/todo";
    "user-center": "/user-center";
  };

  /**
   * route key
   */
  export type RouteKey = keyof RouteMap;

  /**
   * route path
   */
  export type RoutePath = RouteMap[RouteKey];

  /**
   * custom route key
   */ 
  export type CustomRouteKey = Extract<
    RouteKey,
    | "root"
    | "not-found"
  >;

  /**
   * the generated route key
   */ 
  export type GeneratedRouteKey = Exclude<RouteKey, CustomRouteKey>;

  /**
   * the first level route key, which contain the layout of the route
   */
  export type FirstLevelRouteKey = Extract<
    RouteKey,
    | "403"
    | "404"
    | "500"
    | "gj10"
    | "gj20"
    | "gj30"
    | "gj40"
    | "gj50"
    | "gj60"
    | "gj70"
    | "gj80"
    | "home"
    | "iframe-page"
    | "login"
    | "preview"
    | "todo"
    | "user-center"
  >;

  /**
   * the custom first level route key
   */
  export type CustomFirstLevelRouteKey = Extract<
    CustomRouteKey,
    | "root"
    | "not-found"
  >;

  /**
   * the last level route key, which has the page file
   */
  export type LastLevelRouteKey = Extract<
    RouteKey,
    | "gj10_gj1010"
    | "gj10_gj1020"
    | "gj10_gj1030"
    | "gj10_gj1040"
    | "gj10_gj1050"
    | "gj10_gj1060"
    | "gj10_gj1070"
    | "gj20_gj2010"
    | "gj20_gj2020"
    | "gj20_gj2030"
    | "gj20_gj2040"
    | "gj20_gj2050"
    | "gj20_gj2060"
    | "gj20_gj2070"
    | "gj20_gj2080"
    | "gj20_gj2090"
    | "gj20_gj2100"
    | "gj20_gj2110"
    | "gj20_gj2120"
    | "gj30_gj3010"
    | "gj30_gj3020"
    | "gj30_gj3030"
    | "gj40_gj4010"
    | "gj40_gj4020"
    | "gj40_gj4030"
    | "gj40_gj4040"
    | "gj40_gj4050"
    | "gj40_gj4060"
    | "gj40_gj4070"
    | "gj50_gj5010"
    | "gj60_gj6010"
    | "gj60_gj6020"
    | "gj60_gj6021"
    | "gj60_gj6030"
    | "gj60_gj6040"
    | "gj70_gj7010"
    | "gj70_gj7020"
    | "gj70_gj7030"
    | "gj80_gj8010"
    | "gj80_gj8020"
    | "gj80_gj8030"
    | "gj80_gj8040"
    | "gj80_gj8050"
    | "gj80_gj8060"
    | "gj80_gj8070"
    | "gj80_gj8080"
    | "gj80_gj8090"
    | "gj80_gj8100"
    | "403"
    | "404"
    | "500"
    | "iframe-page"
    | "login"
    | "todo"
    | "home"
    | "preview"
    | "user-center"
  >;

  /**
   * the custom last level route key
   */
  export type CustomLastLevelRouteKey = Extract<
    CustomRouteKey,
    | "root"
    | "not-found"
  >;

  /**
   * the single level route key
   */
  export type SingleLevelRouteKey = FirstLevelRouteKey & LastLevelRouteKey;

  /**
   * the custom single level route key
   */
  export type CustomSingleLevelRouteKey = CustomFirstLevelRouteKey & CustomLastLevelRouteKey;

  /**
   * the first level route key, but not the single level
  */
  export type FirstLevelRouteNotSingleKey = Exclude<FirstLevelRouteKey, SingleLevelRouteKey>;

  /**
   * the custom first level route key, but not the single level
   */
  export type CustomFirstLevelRouteNotSingleKey = Exclude<CustomFirstLevelRouteKey, CustomSingleLevelRouteKey>;

  /**
   * the center level route key
   */
  export type CenterLevelRouteKey = Exclude<GeneratedRouteKey, FirstLevelRouteKey | LastLevelRouteKey>;

  /**
   * the custom center level route key
   */
  export type CustomCenterLevelRouteKey = Exclude<CustomRouteKey, CustomFirstLevelRouteKey | CustomLastLevelRouteKey>;

  /**
   * the center level route key
   */
  type GetChildRouteKey<K extends RouteKey, T extends RouteKey = RouteKey> = T extends `${K}_${infer R}`
    ? R extends `${string}_${string}`
      ? never
      : T
    : never;

  /**
   * the single level route
   */
  type SingleLevelRoute<K extends SingleLevelRouteKey = SingleLevelRouteKey> = K extends string
    ? Omit<ElegantConstRoute, 'children'> & {
        name: K;
        path: RouteMap[K];
        component: `layout.${RouteLayout}$view.${K}`;
      }
    : never;

  /**
   * the last level route
   */
  type LastLevelRoute<K extends GeneratedRouteKey> = K extends LastLevelRouteKey
    ? Omit<ElegantConstRoute, 'children'> & {
        name: K;
        path: RouteMap[K];
        component: `view.${K}`;
      }
    : never;
  
  /**
   * the center level route
   */
  type CenterLevelRoute<K extends GeneratedRouteKey> = K extends CenterLevelRouteKey
    ? Omit<ElegantConstRoute, 'component'> & {
        name: K;
        path: RouteMap[K];
        children: (CenterLevelRoute<GetChildRouteKey<K>> | LastLevelRoute<GetChildRouteKey<K>>)[];
      }
    : never;

  /**
   * the multi level route
   */
  type MultiLevelRoute<K extends FirstLevelRouteNotSingleKey = FirstLevelRouteNotSingleKey> = K extends string
    ? ElegantConstRoute & {
        name: K;
        path: RouteMap[K];
        component: `layout.${RouteLayout}`;
        children: (CenterLevelRoute<GetChildRouteKey<K>> | LastLevelRoute<GetChildRouteKey<K>>)[];
      }
    : never;
  
  /**
   * the custom first level route
   */
  type CustomSingleLevelRoute<K extends CustomFirstLevelRouteKey = CustomFirstLevelRouteKey> = K extends string
    ? Omit<ElegantConstRoute, 'children'> & {
        name: K;
        path: RouteMap[K];
        component?: `layout.${RouteLayout}$view.${LastLevelRouteKey}`;
      }
    : never;

  /**
   * the custom last level route
   */
  type CustomLastLevelRoute<K extends CustomRouteKey> = K extends CustomLastLevelRouteKey
    ? Omit<ElegantConstRoute, 'children'> & {
        name: K;
        path: RouteMap[K];
        component?: `view.${LastLevelRouteKey}`;
      }
    : never;

  /**
   * the custom center level route
   */
  type CustomCenterLevelRoute<K extends CustomRouteKey> = K extends CustomCenterLevelRouteKey
    ? Omit<ElegantConstRoute, 'component'> & {
        name: K;
        path: RouteMap[K];
        children: (CustomCenterLevelRoute<GetChildRouteKey<K>> | CustomLastLevelRoute<GetChildRouteKey<K>>)[];
      }
    : never;

  /**
   * the custom multi level route
   */
  type CustomMultiLevelRoute<K extends CustomFirstLevelRouteNotSingleKey = CustomFirstLevelRouteNotSingleKey> =
    K extends string
      ? ElegantConstRoute & {
          name: K;
          path: RouteMap[K];
          component: `layout.${RouteLayout}`;
          children: (CustomCenterLevelRoute<GetChildRouteKey<K>> | CustomLastLevelRoute<GetChildRouteKey<K>>)[];
        }
      : never;

  /**
   * the custom route
   */
  type CustomRoute = CustomSingleLevelRoute | CustomMultiLevelRoute;

  /**
   * the generated route
   */
  type GeneratedRoute = SingleLevelRoute | MultiLevelRoute;

  /**
   * the elegant route
   */
  type ElegantRoute = GeneratedRoute | CustomRoute;
}
