user  nginx;
worker_processes  auto;

error_log  /var/log/nginx/error.log notice;
pid        /var/run/nginx.pid;

# google brotliモジュールを追加
load_module  modules/ngx_http_brotli_filter_module.so;
load_module  modules/ngx_http_brotli_static_module.so;

events {
    worker_connections  1024;
}

http {
    include       /etc/nginx/mime.types;
    default_type  application/octet-stream;

    log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
                      '$status $body_bytes_sent "$http_referer" '
                      '"$http_user_agent" "$http_x_forwarded_for"';

    access_log  /var/log/nginx/access.log  main;

    sendfile        on;
    #tcp_nopush     on;

    keepalive_timeout  65;

    # brotli圧縮を有効にする
    brotli on;
    brotli_comp_level 6;
    brotli_buffers 16 8k;
    brotli_min_length 1000;
    brotli_types application/atom+xml application/geo+json application/javascript application/x-javascript application/json application/ld+json application/manifest+json application/rdf+xml application/rss+xml application/vnd.ms-fontobject application/wasm application/x-web-app-manifest+json application/xhtml+xml application/xml font/eot font/otf font/ttf image/bmp image/svg+xml text/cache-manifest text/calendar text/css text/javascript text/markdown text/plain text/xml text/vcard text/vnd.rim.location.xloc text/vtt text/x-component text/x-cross-domain-policy;

    # gzip圧縮を有効にする
    gzip on;
    gzip_vary on;
    gzip_proxied any;
    gzip_comp_level 6;
    gzip_min_length 1000;
    gzip_types text/plain text/css application/json application/javascript application/x-javascript text/xml application/xml application/xml+rss text/javascript;

    # サービスマスターの設定
    server {
        # すべてのIPv4およびIPv6アドレスのポート80を同時にリスンする
        listen  [::]:80 ipv6only=off;
        # ローカルIP
        server_name localhost;
        # リクエストボディの最大サイズを制限する
        client_max_body_size 200m;
        # エラーページ
        error_page   500 502 503 504  /50x.html;

        # リソースファイル
        location / {
            # フロントエンドのリソースファイルへのパス
            root /usr/share/nginx/html;
            # フロントエンドindexページ
            index  index.html index.htm;
            # ブラウザの更新404を防ぐ
            try_files $uri $uri/ /index.html;
            # キャッシュ有効期間
            expires 15d;
        }
		
        # hangfireのダッシュボード
        location /hangfire {
            # 初期設定
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header Host $host;
            proxy_set_header X_Nginx_Proxy true;
            # API_HOST環境変数
            proxy_pass ${API_HOST};
            proxy_redirect default;
            # クロスオリジンリクエストのプリフライトリクエストの処理
            if ($request_method = "OPTIONS") {
                add_header 'Access-Control-Max-Age' 1728000;
                add_header 'Content-Type' 'text/plain charset=UTF-8';
                # データの返却は不要です
                add_header 'Content-Length' 0;
                # プリフライトリクエストが成功し、ステータスコード204を返します
                return 204;
            }
        }

        # エラーページパス
        location = /50x.html {
            root   /usr/share/nginx/html;
        }

        # バックエンドの設定，/api/AFCT　のリクエストを設定する
        location /api/AFCT {
            # クロスオリジンアクセスを許可する
            add_header 'Access-Control-Allow-Origin' "${CORS}";
            # フロントエンドのJavaScriptコードにレスポンスを公開する
            add_header 'Access-Control-Allow-Credentials' 'true';
            # 許可されるHTTPリクエストメソッド
            add_header "Access-Control-Allow-Methods" "POST";
            # システムで使用されている特殊なリクエストヘッダー
            add_header "Access-Control-Allow-Headers" "Authorization,Content-Type,Accept,Browser,Kinoid,Os,Regsisyo,Token,Userid";
            # 初期設定
            proxy_next_upstream error timeout invalid_header http_500 http_502 http_503 http_504;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header Host $host;
            proxy_set_header X_Nginx_Proxy true;
            # API_HOST環境変数
            proxy_pass ${API_HOST};
            proxy_redirect default;

            # フロントエンドのタイムアウト時間を10分に設定
            proxy_connect_timeout 600s;
            proxy_send_timeout 600s;
            proxy_read_timeout 600s;

            # クロスオリジンリクエストのプリフライトリクエストの処理
            if ($request_method = "OPTIONS") {
                add_header 'Access-Control-Max-Age' 1728000;
                add_header 'Content-Type' 'text/plain charset=UTF-8';
                # データの返却は不要です
                add_header 'Content-Length' 0;
                # プリフライトリクエストが成功し、ステータスコード204を返します
                return 204;
            }
        }
    }

    include /etc/nginx/conf.d/*.conf;
}
